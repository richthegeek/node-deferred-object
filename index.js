// Generated by CoffeeScript 1.6.3
(function() {
  var Contextify, DeferredObject, Q;

  Contextify = require('contextify');

  Q = require('q');

  module.exports = DeferredObject = (function() {
    function DeferredObject(data) {
      var k, keys, v,
        _this = this;
      this.data = data;
      keys = (function() {
        var _ref, _results;
        _ref = this.data;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          if (k !== 'data') {
            _results.push(k);
          }
        }
        return _results;
      }).call(this);
      keys.forEach(function(k) {
        return _this.__defineGetter__(k, function() {
          return this.data[k];
        });
      });
    }

    DeferredObject.prototype.toJSON = function() {
      var key, result, val, _ref;
      result = {};
      _ref = this.data;
      for (key in _ref) {
        val = _ref[key];
        if (val && (val.toJSON != null)) {
          val = val.toJSON();
        }
        result[key] = val;
      }
      return result;
    };

    DeferredObject.prototype.defer = function(key, getter) {
      var set,
        _this = this;
      set = function(val) {
        delete _this[key];
        return _this[key] = _this.data[key] = val;
      };
      if (this[key] == null) {
        this[key] = null;
      }
      this.data[key] = void 0;
      return Object.defineProperty(this, key, {
        get: function() {
          var defer, val;
          if (typeof _this.data[key] !== 'undefined') {
            val = _this.data[key];
            if (val.then != null) {
              throw val;
            }
            return val;
          }
          defer = Q.defer();
          getter(key, _this.data, function(err, result) {
            var complete, error;
            error = defer.reject;
            complete = defer.resolve;
            if (err) {
              return error(err);
            }
            if (Q.isPromise(result)) {
              return result.then(complete, error);
            } else {
              return complete(result);
            }
          });
          set(defer.promise);
          defer.promise.then(function(result) {
            return set(result);
          });
          throw defer.promise;
        }
      });
    };

    DeferredObject.prototype.get = function(key, context, callback) {
      return this["eval"]("this." + key, context, callback);
    };

    DeferredObject.prototype["eval"] = function(str, context, callback) {
      var cb, onComplete, onReject, onResolve, sandbox,
        _this = this;
      if (typeof context === 'function') {
        callback = context;
        context = {};
      }
      cb = function(err, res) {
        return callback(err, res);
      };
      onComplete = function(result) {
        if ((result != null) && (result.then != null)) {
          return result.then(onResolve, onReject);
        }
        return cb(null, result);
      };
      onResolve = function(result) {
        return process.nextTick(function() {
          return _this["eval"](str, context, callback);
        });
      };
      onReject = cb;
      sandbox = this;
      sandbox.result = null;
      sandbox.error = null;
      sandbox.str = str;
      return this.evalEval(str, sandbox, context, function(error, result) {
        if (error !== null) {
          if (error.then == null) {
            error.then = function() {
              return onReject(error);
            };
          }
          return error.then(onResolve, onReject);
        } else {
          return onComplete(result);
        }
      });
    };

    DeferredObject.prototype.evalEval = function(str, sandbox, context, callback) {
      var teval;
      teval = sandbox["eval"];
      
		with (sandbox) {
			with (context) {
				eval = global.eval
				try {
					result = eval(str)
				} catch (e) {
					error = e
				}
			}
		};
      sandbox["eval"] = teval;
      return callback(sandbox.error, sandbox.result);
    };

    return DeferredObject;

  })();

}).call(this);

/*
//@ sourceMappingURL=index.map
*/

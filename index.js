// Generated by CoffeeScript 1.6.3
(function() {
  var DeferredObject, Q;

  Q = require('q');

  module.exports = DeferredObject = (function() {
    function DeferredObject(data) {
      var k, v, _ref,
        _this = this;
      this.data = data;
      _ref = this.data;
      for (k in _ref) {
        v = _ref[k];
        if (k !== 'data') {
          (function(k) {
            return _this.__defineGetter__(k, function() {
              return this.data[k];
            });
          })(k);
        }
      }
    }

    DeferredObject.prototype.toJSON = function() {
      var key, result, val, _ref;
      result = {};
      _ref = this.data;
      for (key in _ref) {
        val = _ref[key];
        if (val && (val.toJSON != null)) {
          val = val.toJSON();
        }
        result[key] = val;
      }
      return result;
    };

    DeferredObject.prototype.defer = function(key, getter) {
      var _base,
        _this = this;
      if (this[key] == null) {
        this[key] = null;
      }
      if ((_base = this.data)[key] == null) {
        _base[key] = null;
      }
      return Object.defineProperty(this, key, {
        get: function() {
          var defer, val;
          if (val = _this.data[key]) {
            if (Q.isPromise(val)) {
              throw val;
            }
            return val;
          }
          defer = Q.defer();
          getter(key, _this.data, function(err, result) {
            var complete, error;
            error = function(err) {
              return defer.reject(err);
            };
            complete = function(result) {
              _this.data[key] = result;
              return defer.resolve(result);
            };
            if (err) {
              return error(err);
            }
            if (Q.isPromise(result)) {
              return result.then(complete, error);
            } else {
              return complete(result);
            }
          });
          _this.data[key] = defer.promise;
          throw defer.promise;
        }
      });
    };

    DeferredObject.prototype.get = function(key, context, callback) {
      return this["eval"]("this." + key, context, callback);
    };

    DeferredObject.prototype["eval"] = function(str, context, defer, callback) {
      var args, err, last, onComplete, onReject, onResolve, self,
        _this = this;
      self = this;
      args = Array.prototype.slice.call(arguments, 1);
      last = args.pop();
      if (typeof last === 'function') {
        callback = last;
        last = args.pop();
      }
      if (last && (last.promise != null)) {
        defer = last;
        last = args.pop();
      } else {
        defer = Q.defer();
      }
      context = last || {};
      onComplete = function(result) {
        if (typeof callback === "function") {
          callback(null, result);
        }
        return defer.resolve(result);
      };
      onResolve = function(result) {
        return _this["eval"](str, context, defer, callback);
      };
      onReject = function(reason) {
        if (typeof callback === "function") {
          callback(reason);
        }
        return defer.reject(reason);
      };
      try {
        with(context) {
				(function() {
					onComplete(eval(str))
				}).call(self)
			};
        return null;
      } catch (_error) {
        err = _error;
        if (err.then == null) {
          err.then = function() {
            return onReject(err);
          };
        }
        err.then(onResolve, onReject);
      }
      return defer.promise;
    };

    return DeferredObject;

  })();

}).call(this);

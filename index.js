// Generated by CoffeeScript 1.6.3
(function() {
  var DeferredObject, Q;

  Q = require('q');

  module.exports = DeferredObject = (function() {
    function DeferredObject(data) {
      var k, v, _fn, _ref,
        _this = this;
      this.data = data;
      _ref = this.data;
      _fn = function(k) {
        return _this.__defineGetter__(k, function() {
          return this.data[k];
        });
      };
      for (k in _ref) {
        v = _ref[k];
        _fn(k);
      }
    }

    DeferredObject.prototype.toJSON = function() {
      var key, result, val, _ref;
      result = {};
      _ref = this.data;
      for (key in _ref) {
        val = _ref[key];
        if (val && (val.toJSON != null)) {
          val = val.toJSON();
        }
        result[key] = val;
      }
      return result;
    };

    DeferredObject.prototype.defer = function(key, getter) {
      var _base,
        _this = this;
      if (this[key] == null) {
        this[key] = null;
      }
      if ((_base = this.data)[key] == null) {
        _base[key] = null;
      }
      return Object.defineProperty(this, key, {
        get: function() {
          var defer, val;
          if (val = _this.data[key]) {
            if (Q.isPromise(val)) {
              throw val;
            }
            return val;
          }
          defer = Q.defer();
          getter(key, _this.data, function(err, result) {
            if (err) {
              return defer.resolve([err]);
            }
            _this.data[key] = result;
            return defer.resolve([null, result]);
          });
          _this.data[key] = defer.promise;
          throw defer.promise;
        }
      });
    };

    DeferredObject.prototype.get = function(key, callback) {
      return this["eval"]("this." + key, callback);
    };

    DeferredObject.prototype["eval"] = function(str, callback) {
      var err,
        _this = this;
      try {
        return callback(null, eval(str));
      } catch (_error) {
        err = _error;
        if (err.then == null) {
          err.then = function() {
            return callback(err);
          };
        }
        return err.then(function(arg) {
          var result;
          err = arg[0], result = arg[1];
          if (err) {
            return callback(err);
          }
          return _this["eval"](str, callback);
        });
      }
    };

    return DeferredObject;

  })();

}).call(this);
